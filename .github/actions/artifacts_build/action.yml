name: Build and Push aws-opentelemetry-distro
description: |
  This action assumes that the repo was checked out. Builds and pushes/loads wheel and image files. Also performs scan
  of the resultant image.

inputs:
  aws-region:
    required: false
    description: "AWS Region, required only if push_image is true"
  image_uri_with_tag:
    required: true
    description: "Image URI with Tag"
  image_registry:
    required: false
    description: "Image Registry, required only if push_image is true"
  snapshot-ecr-role:
    required: false
    description: "IAM Role used for pushing to snapshot ecr, required only if push_image is true"
  push_image:
    required: true
    description: "Whether push image to ECR"
  load_image:
    required: true
    description: "Whether load the image for the following use, only load in PR build"
  python_version:
    required: true
    description: "The python version used in actions"
  package_name:
    required: true
    description: "The package name"
  os:
    required: true
    description: "The os"


runs:
  using: "composite"
  steps:
    - name: Set up
      uses: ./.github/actions/set_up
      with:
        python_version: ${{ inputs.python_version }}
        package_name: ${{ inputs.package_name }}
        os: ${{ inputs.os }}
        run_unit_tests: true

    - name: Configure AWS Credentials
      if: ${{ inputs.push_image == true || inputs.push_image == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.snapshot-ecr-role }}
        aws-region: ${{ inputs.aws-region }}

    - name: Install Dependencies and Build Wheel
      id: staging_wheel_build
      shell: bash
      run: |
        pip install --upgrade pip setuptools wheel packaging build
        rm -rf ./dist/*
        cd ./aws-opentelemetry-distro
        python -m build --outdir ../dist

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to private AWS ECR
      if: ${{ inputs.push_image == true || inputs.push_image == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.image_registry }}
      env:
        AWS_REGION: ${{ inputs.aws-region }}

    # Per https://docs.aws.amazon.com/AmazonECR/latest/public/docker-pull-ecr-image.html, it is possible to
    # make unauthorized calls to get public ECR images (needed to build the ADOT Python docker image), but
    # it can fail if you previously authenticated to a public repo. Adding this step to log out, so we
    # ensure we can make unauthenticated call. This is important for making the pr_build workflow run on
    # PRs created from forked repos.
    - name: Logout of public AWS ECR
      shell: bash
      run: docker logout public.ecr.aws

    - name: Build and push image according to input
      uses: docker/build-push-action@v5
      with:
        push: ${{ inputs.push_image }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        tags: ${{ inputs.image_uri_with_tag }}
        load: ${{ inputs.load_image }}

    - name: Perform image scan
      uses: ./.github/actions/image_scan
      with:
        image-ref: ${{ inputs.image_uri_with_tag }}
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'