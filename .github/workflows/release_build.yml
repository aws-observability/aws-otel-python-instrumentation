name: Release Build
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag the release with, e.g., 1.2.0, 1.2.1-alpha.1
        required: true
env:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REGISTRY: 637423224110.dkr.ecr.us-east-1.amazonaws.com
  PRIVATE_ECR_REPOSITORY: eks/observability/adot-autoinstrumentation-python

permissions:
  id-token: write
  contents: read

jobs:
  build:
    env:
      py38: "3.8"
      RUN_MATRIX_COMBINATION: ${{ matrix.python-version }}-${{ matrix.package }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        python-version: [ py38 ]
        package: [ "aws-opentelemetry-distro" ]
        os: [ ubuntu-latest ]
    steps:
      - name: Checkout Contrib Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env[matrix.python-version] }}
          
      - name: Install tox
        run: pip install tox==3.27.1 tox-factor

      - name: Cache tox environment
        # Preserves .tox directory between runs for faster installs
        uses: actions/cache@v1
        with:
          path: |
            .tox
            ~/.cache/pip
          key: v7-build-tox-cache-${{ env.RUN_MATRIX_COMBINATION }}-${{ hashFiles('tox.ini', 'dev-requirements.txt') }}

      - name: run tox
        run: tox -f ${{ matrix.python-version }}-${{ matrix.package }} -- -ra --benchmark-json=${{ env.RUN_MATRIX_COMBINATION }}-benchmark.json

      - name: Install Dependencies and Build Wheel
        id: wheel_build
        run: |
          pip install --upgrade pip setuptools wheel packaging build twine
          rm -rf ./dist/*
          cd ./aws-opentelemetry-distro
          python -m build --outdir ../dist
          cd ../dist
          pkg_version=$(grep '__version__' ../aws-opentelemetry-distro/src/amazon/opentelemetry/distro/version.py | awk -F '"' '{print $2}')
          echo "ADOT_PYTHON_VERSION=$pkg_version" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}
        env:
          AWS_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.PRIVATE_ECR_REPOSITORY }}:v${{ github.event.inputs.version }}

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          cp "dist/aws_opentelemetry_distro-${{ steps.wheel_build.outputs.ADOT_PYTHON_VERSION }}-py3-none-any.whl" aws_opentelemetry_distro.whl
          gh release create --target "$GITHUB_REF_NAME" \
             --title "Release v${{ github.event.inputs.version }}" \
             --draft \
             "v${{ github.event.inputs.version }}" \
             aws_opentelemetry_distro.whl

      - name: Get PyPI secrets by name and ARN
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        id: pypi_secrets
        with:
          secret-ids: |
            prod/PyPI/apiToken,arn:aws:secretsmanager:us-east-1:637423224110:secret:prod/PyPI/apiToken-W2a9ny
            prod/PyPI/credentials,arn:aws:secretsmanager:us-east-1:637423224110:secret:prod/PyPI/credentials-JAzHsX
            test/PyPI/apiToken,arn:aws:secretsmanager:us-east-1:637423224110:secret:test/PyPI/apiToken-z5iqc6
            test/PyPI/credentials,arn:aws:secretsmanager:us-east-1:637423224110:secret:test/PyPI/credentials-bCQfg9

      # The step below publishes to testpypi in order to catch any issues
      # with the package configuration that would cause a failure to upload to pypi.
      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: ${{ steps.pypi_secrets.outputs.test/PyPI/apiToken }}
          TWINE_PASSWORD: ${{ steps.pypi_secrets.outputs.test/PyPI/credentials }}
        run: |
          twine upload --repository testpypi --skip-existing --verbose dist/aws_opentelemetry_distro-${{ steps.wheel_build.outputs.ADOT_PYTHON_VERSION }}-py3-none-any.whl

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ steps.pypi_secrets.outputs.prod/PyPI/apiToken }}
          TWINE_PASSWORD: ${{ steps.pypi_secrets.outputs.prod/PyPI/credentials }}
        run: |
          twine upload --skip-existing --verbose dist/aws_opentelemetry_distro-${{ steps.wheel_build.outputs.ADOT_PYTHON_VERSION }}-py3-none-any.whl
