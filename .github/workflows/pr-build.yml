name: Python Instrumentation PR Build
on:
  pull_request:
    branches:
      - main
      - "release/v*"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Build Wheel and Image Files
        uses: ./.github/actions/artifacts_build
        with:
          image_uri_with_tag: pr-build/${{ matrix.python-version }}
          push_image: false
          load_image: true
          python_version: ${{ matrix.python-version }}
          package_name: aws-opentelemetry-distro
          os: ubuntu-latest

      - name: Set up and run contract tests with pytest
        run: |
          bash scripts/set-up-contract-tests.sh
          pip install pytest
          pytest contract-tests/tests

  build-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Build sample lambda function
        working-directory: lambda-layer/sample-apps
        run: ./package-lambda-function.sh
      - name: Build layers
        working-directory: lambda-layer/src
        run: |
          ./build-lambda-layer.sh
          pip install tox
          tox

  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        tox-environment: ["spellcheck", "lint"]
    steps:
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Install libsnappy-dev
        if: ${{ matrix.tox-environment == 'lint' }}
        run: sudo apt-get update && sudo apt-get install -y libsnappy-dev

      - name: Set up
        uses: ./.github/actions/set_up
        with:
          python_version: 3.11
          package_name: aws-opentelemetry-distro
          os: ubuntu-latest
          run_unit_tests: false

      - name: Run ${{ matrix.tox-environment }} with tox
        run: tox -e ${{ matrix.tox-environment }}

  spotless:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Gradle validation
        uses: gradle/wrapper-validation-action@v1

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Build with Gradle
        run: cd performance-tests; ./gradlew spotlessCheck

  all-pr-checks-pass:
    runs-on: ubuntu-latest
    needs: [static-code-checks, lint, spotless, build, build-lambda]
    if: always()
    steps:
      - name: Checkout to get workflow file
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #5.0.0
      
      - name: Check all jobs succeeded and none missing
        run: |
          # Check if all needed jobs succeeded
          results='${{ toJSON(needs) }}'
          if echo "$results" | jq -r '.[] | .result' | grep -v success; then
            echo "Some jobs failed"
            exit 1
          fi
          
          # Extract all job names from workflow (excluding this gate job)
          all_jobs=$(yq eval '.jobs | keys | .[]' .github/workflows/pr-build.yml | grep -v "all-pr-checks-pass" | sort)
          
          # Extract job names from needs array
          needed_jobs='${{ toJSON(needs) }}'
          needs_list=$(echo "$needed_jobs" | jq -r 'keys[]' | sort)
          
          # Check if any jobs are missing from needs
          missing_jobs=$(comm -23 <(echo "$all_jobs") <(echo "$needs_list"))
          if [ -n "$missing_jobs" ]; then
            echo "ERROR: Jobs missing from needs array in all-pr-checks-pass:"
            echo "$missing_jobs"
            echo "Please add these jobs to the needs array of all-pr-checks-pass"
            exit 1
          fi
          
          echo "All checks passed and no jobs missing from gate!"
